import numpy as np

def d_tuples(d, q):
        
    k = np.ones((1,d))
    khat = (q-d+1)*k
    ind = np.zeros((1,d))
    count = 0
    
    p = 0
    while k[0,d-1] <= q:
        k[0,p] = k[0,p]+1
        if k[0,p] > khat[0,p]:
            if p != d-1:
                k[0,p] = 1
                p = p+1
        else:
            for j in range(p):
                khat[0,j] = khat[0,p]-k[0,p]+1
            k[0,0] = khat[0,0]
            p = 0
            count = count +1
            ind = np.concatenate((ind,k))
        
    return ind, count

def combvec(v1,v2):
    
    vec = np.zeros((2,v1.size*v2.size))
    
    for i in range(v2.size):
        for j in range(v1.size):
            vec[0,j+i*v1.size] = v1[0,j]
            vec[1,j+i*v1.size] = v2[0,i] 
    
    return vec

v1 = np.array([[1,2,3,4]]);
v2 = np.array([[3,4,5,6]]);

print combvec(v1,v2)
