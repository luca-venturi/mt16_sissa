import numpy as np
import math as math
import matplotlib.pyplot as plt
from QuadratureRule import *

def count_boundary_terms(x):
    m = 0
    for j in range(x.shape[1]):
        q = 0
        for i in range(x.shape[0]):
            if x[i,j] == 1 or x[i,j] == -1:
                q = 1
        if q == 1:
            m = m +1
    
    return m

file_ = open('cardinality_quadrature_dim4','w')

file_.write('################   Sparse Grid:   ################\n')

file_.write('\n### ClenshawCurtis:\n\n')
for q in range(4,12):
    x, w, m = SmolyakRule(4,q,'ClenshawCurtis',[[-1,1],[-1,1],[-1,1],[-1,1]])
    n = count_boundary_terms(x)
    s = 'q =' + str(q) + ' => ' + str(m) +' punti. ' + str(n) + ' sul bordo. ' + str(m-n) + ' non sul bordo.\n'
    print q
    file_.write(s)
    
file_.write('\n### Linspace:\n\n')
for q in range(4,12):
    x, w, m = SmolyakRule(4,q,'Linspace',[[-1,1],[-1,1],[-1,1],[-1,1]])
    n = count_boundary_terms(x)
    s = 'q =' + str(q) + ' => ' + str(m) +' punti. ' + str(n) + ' sul bordo. ' + str(m-n) + ' non sul bordo.\n'
    print q
    file_.write(s)
    
file_.write('\n### GaussLegendre:\n\n')
for q in range(4,12):
    x, w, m = SmolyakRule(4,q,'GaussLegendre',[[-1,1],[-1,1],[-1,1],[-1,1]])
    n = count_boundary_terms(x)
    s = 'q =' + str(q) + ' => ' + str(m) +' punti. ' + str(n) + ' sul bordo. ' + str(m-n) + ' non sul bordo.\n'
    print q
    file_.write(s)
    
file_.write('\n### ClenshawCurtis_nested:\n\n')
q = 4
m = 0
while m < 1000:
    x, w, m = SmolyakRule(4,q,'ClenshawCurtis_nested',[[-1,1],[-1,1],[-1,1],[-1,1]])
    n = count_boundary_terms(x)
    s = 'q =' + str(q) + ' => ' + str(m) +' punti. ' + str(n) + ' sul bordo. ' + str(m-n) + ' non sul bordo.\n'
    print q
    q = q +1
    file_.write(s)

file_.write('\n### GaussJacobi:\n\n')
for q in range(4,12):
    x, w, m = SmolyakRule(4,q,'GaussJacobi',[[-1,1],[-1,1],[-1,1],[-1,1]],a=[[9.0,9.0],[9.0,9.0],[9.0,9.0],[9.0,9.0]])
    n = count_boundary_terms(x)
    s = 'q =' + str(q) + ' => ' + str(m) +' punti. ' + str(n) + ' sul bordo. ' + str(m-n) + ' non sul bordo.\n'
    print q
    file_.write(s)

file_.write('\n\n################   Uniform Grid:   ################\n')

file_.write('\n### Linspace:\n\n')
for n in range(1,8):
    x, w, m = TensorProductRule(4,[n,n,n,n],'Linspace',[[-1,1],[-1,1],[-1,1],[-1,1]])
    l = count_boundary_terms(x)
    s = 'n =' + str(n) + ' => ' + str(m) +' punti. ' + str(l) + ' sul bordo. ' + str(m-l) + ' non sul bordo.\n'
    print n
    file_.write(s)
    
file_.write('\n### ClenshawCurtis_nested:\n\n')
for n in range(1,5):
    m = (2**(n-1)+1)
    x, w, m = TensorProductRule(4,[m,m,m,m],'Linspace',[[-1,1],[-1,1],[-1,1],[-1,1]])
    l = count_boundary_terms(x)
    s = 'n =' + str(n) + ' => ' + str(m) +' punti. ' + str(l) + ' sul bordo. ' + str(m-l) + ' non sul bordo.\n'
    print n
    file_.write(s)

file_.close()

