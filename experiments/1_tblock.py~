from dolfin import *
from RBniCS import *

class Tblock(EllipticCoerciveRBBase):

    def __init__(self, V, subd, bound):
        bc = DirichletBC(V, 0.0, bound, 3)
        super(Tblock, self).__init__(V, [bc])
        self.dx = Measure("dx")(subdomain_data=subd)
        self.ds = Measure("ds")(subdomain_data=bound)
        # Use the H^1 seminorm on V as norm, instead of the H^1 norm
        u = self.u
        v = self.v
        dx = self.dx
        scalar = inner(grad(u),grad(v))*dx
        self.S = assemble(scalar)
        [bc.apply(self.S) for bc in self.bc_list] # make sure to apply BCs to the inner product matrix
    
    ## Return the alpha_lower bound.
    def get_alpha_lb(self):
        return min(self.compute_theta_a())
    
    ## Set theta multiplicative terms of the affine expansion of a.
    def compute_theta_a(self):
        mu = self.mu[0]
        theta_a0 = 1.0
        theta_a1 = mu
        return (theta_a0, theta_a1)
    
    ## Set theta multiplicative terms of the affine expansion of f.
    def compute_theta_f(self):
        return (1.0,)
    
    ## Set matrices resulting from the truth discretization of a.
    def assemble_truth_a(self):
        u = self.u
        v = self.v
        dx = self.dx
        # Assemble A0
        a0 = inner(grad(u),grad(v))*dx(1) + 1e-15*inner(u,v)*dx
        A0 = assemble(a0)
        # Assemble A1
        a1 = inner(grad(u),grad(v))*dx(2) + 1e-15*inner(u,v)*dx
        A1 = assemble(a1)
        # Return
        return (A0, A1)
    
    ## Set vectors resulting from the truth discretization of f.
    def assemble_truth_f(self):
        v = self.v
        dx = self.dx
        ds = self.ds
        # Assemble F0
        f0 = v*ds(1) + 1e-15*v*dx
        F0 = assemble(f0)
        # Return
        return (F0,)


#~~~~~~~~~~~~~~~~~~~~~~~~~     MAIN PROGRAM     ~~~~~~~~~~~~~~~~~~~~~~~~~# 

# 1. Read the mesh for this problem
mesh = Mesh("data/tblock.xml")
subd = MeshFunction("size_t", mesh, "data/tblock_physical_region.xml")
bound = MeshFunction("size_t", mesh, "data/tblock_facet_region.xml")

# 2. Create Finite Element space (Lagrange P1)
V = FunctionSpace(mesh, "Lagrange", 1)

# 3. Allocate an object of the Thermal Block class
tb = Tblock(V, subd, bound)

# 4. Choose PETSc solvers as linear algebra backend
parameters.linear_algebra_backend = 'PETSc'

# 5. Set mu range, xi_train and Nmax
mu_range = [(-3.0, 3.0)] # Qua voglio impostare la distribuzione e i parametri
tb.setmu_range(mu_range) # Successivamente imposto i flags
tb.setxi_train(1000)
tb.setNmax(7) # Invece voglio anche poter impostare una tolleranza e ricevere l'Nmax

# 6. Perform the offline phase
first_mu = (1.0)
tb.setmu(first_mu)
tb.offline()

# 7. Perform an online solve
online_mu = (2.0,)
tb.setmu(online_mu)
tb.online_solve()

# 8. Perform an error analysis
tb.setxi_test(500) # L'errore deve essere calcolato con la distribuzione
tb.error_analysis()
